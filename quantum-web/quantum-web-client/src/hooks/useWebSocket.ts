'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import {
  WebSocketStatus,
  WebSocketMessage,
  WebSocketOptions,
  WebSocketHookReturn,
  SubscribeRequest,
  UnsubscribeRequest,
} from '@/lib/api/websocket-types';

const DEFAULT_OPTIONS: Partial<WebSocketOptions> = {
  reconnectInterval: 3000,
  maxReconnectAttempts: 5,
  heartbeatInterval: 30000,
};

export default function useWebSocket(options: WebSocketOptions): WebSocketHookReturn {
  const [status, setStatus] = useState<WebSocketStatus>('disconnected');
  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);
  const [error, setError] = useState<Error | null>(null);
  const [reconnectAttempts, setReconnectAttempts] = useState(0);

  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const isManualDisconnectRef = useRef(false);
  const messageQueueRef = useRef<any[]>([]);

  const config = { ...DEFAULT_OPTIONS, ...options };

  // WebSocket Ïó∞Í≤∞
  const connect = useCallback(() => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      console.log('WebSocket already connected');
      return;
    }

    console.log(`WebSocket Ïó∞Í≤∞ ÏãúÎèÑ: ${config.url}`);
    isManualDisconnectRef.current = false;
    setStatus('connecting');
    setError(null);

    try {
      const ws = new WebSocket(config.url);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ');
        setStatus('connected');
        setError(null);
        reconnectAttemptsRef.current = 0;
        setReconnectAttempts(0);

        // ÎåÄÍ∏∞Ïó¥Ïóê ÏûàÎäî Î©îÏãúÏßÄÎì§ Ï†ÑÏÜ°
        messageQueueRef.current.forEach(message => {
          ws.send(JSON.stringify(message));
        });
        messageQueueRef.current = [];

        // ÌïòÌä∏ÎπÑÌä∏ ÏãúÏûë
        if (config.heartbeatInterval && config.heartbeatInterval > 0) {
          heartbeatIntervalRef.current = setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({ type: 'heartbeat', timestamp: new Date().toISOString() }));
            }
          }, config.heartbeatInterval);
        }

        config.onConnect?.();
      };

      ws.onmessage = (event) => {
        try {
          console.log('üì® Raw WebSocket Î©îÏãúÏßÄ ÏàòÏã†:', event.data);
          
          const message: WebSocketMessage = JSON.parse(event.data);
          console.log('üìã ÌååÏã±Îêú Î©îÏãúÏßÄ:', {
            type: message.type,
            trnm: message.trnm,
            command: message.command,
            return_code: message.return_code,
            dataKeys: Object.keys(message.data || message.original_data || {}),
            timestamp: message.timestamp
          });

          // ÌÇ§ÏõÄ ÏÑúÎ≤Ñ ÏùëÎãµ Ï≤òÎ¶¨
          if (message.trnm) {
            switch (message.trnm) {
              case 'REG':
                console.log(`‚úÖ Íµ¨ÎèÖ ${message.return_code === 0 ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}:`, message.return_msg);
                if (message.return_code === 0) {
                  console.log('üìä Íµ¨ÎèÖÎêú Ï¢ÖÎ™©:', message.data);
                }
                break;
                
              case 'REMOVE':
                console.log(`‚úÖ Íµ¨ÎèÖ Ìï¥ÏßÄ ${message.return_code === 0 ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}:`, message.return_msg);
                break;
                
              case 'REAL':
                console.log('üî• Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† (REAL)');
                // Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Îäî Í∑∏ÎåÄÎ°ú Ï†ÑÎã¨
                break;
                
              default:
                console.log('‚ùì Ïïå Ïàò ÏóÜÎäî ÌÇ§ÏõÄ trnm:', message.trnm, message);
            }
          }
          
          // ÌïòÌä∏ÎπÑÌä∏ Î©îÏãúÏßÄÎäî Î¨¥Ïãú
          if (message.type === 'heartbeat' || message.command === 'ping') {
            console.log('üíì ÌïòÌä∏ÎπÑÌä∏/Ping Î©îÏãúÏßÄ ÏàòÏã†');
            return;
          }

          setLastMessage(message);
        } catch (err) {
          console.error('‚ùå WebSocket Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', err);
          console.error('‚ùå ÌååÏã± Ïã§Ìå®Ìïú Îç∞Ïù¥ÌÑ∞:', event.data);
          setError(new Error('Î©îÏãúÏßÄ ÌååÏã± Ïã§Ìå®'));
        }
      };

      ws.onclose = (event) => {
        console.log('WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å:', event.code, event.reason);
        
        // ÌïòÌä∏ÎπÑÌä∏ Ï†ïÎ¶¨
        if (heartbeatIntervalRef.current) {
          clearInterval(heartbeatIntervalRef.current);
          heartbeatIntervalRef.current = null;
        }

        if (!isManualDisconnectRef.current) {
          setStatus('disconnected');
          config.onDisconnect?.();

          // ÏûêÎèô Ïû¨Ïó∞Í≤∞
          if (reconnectAttemptsRef.current < (config.maxReconnectAttempts || 5)) {
            setStatus('reconnecting');
            reconnectAttemptsRef.current += 1;
            setReconnectAttempts(reconnectAttemptsRef.current);

            console.log(`Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ${reconnectAttemptsRef.current}/${config.maxReconnectAttempts}`);
            config.onReconnecting?.(reconnectAttemptsRef.current);

            reconnectTimeoutRef.current = setTimeout(() => {
              connect();
            }, config.reconnectInterval);
          } else {
            console.log('ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º');
            setStatus('error');
            setError(new Error('ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàòÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.'));
          }
        } else {
          setStatus('disconnected');
          config.onDisconnect?.();
        }
      };

      ws.onerror = (event) => {
        console.error('WebSocket ÏóêÎü¨:', event);
        const wsError = new Error('WebSocket Ïó∞Í≤∞ Ïò§Î•ò');
        setError(wsError);
        setStatus('error');
        config.onError?.(wsError);
      };

    } catch (err) {
      console.error('WebSocket ÏÉùÏÑ± Ïò§Î•ò:', err);
      const initError = new Error('WebSocket Ï¥àÍ∏∞Ìôî Ïã§Ìå®');
      setError(initError);
      setStatus('error');
      config.onError?.(initError);
    }
  }, [config.url, config.reconnectInterval, config.maxReconnectAttempts, config.heartbeatInterval]);

  // WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú
  const disconnect = useCallback(() => {
    console.log('WebSocket ÏàòÎèô Ïó∞Í≤∞ Ìï¥Ï†ú');
    isManualDisconnectRef.current = true;

    // Ïû¨Ïó∞Í≤∞ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    // ÌïòÌä∏ÎπÑÌä∏ Ï†ïÎ¶¨
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
      heartbeatIntervalRef.current = null;
    }

    // WebSocket Ïó∞Í≤∞ Ï†ïÎ¶¨
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }

    setStatus('disconnected');
    setError(null);
    reconnectAttemptsRef.current = 0;
    setReconnectAttempts(0);
  }, []);

  // Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const sendMessage = useCallback((message: any) => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      const messageStr = JSON.stringify(message);
      console.log('üì§ WebSocket Î©îÏãúÏßÄ Ï†ÑÏÜ°:', {
        type: message.type,
        symbols: message.symbols,
        dataTypes: message.dataTypes,
        messageStr: messageStr
      });
      wsRef.current.send(messageStr);
    } else {
      console.log('‚ö†Ô∏è WebSocket Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå. Î©îÏãúÏßÄ ÎåÄÍ∏∞Ïó¥Ïóê Ï∂îÍ∞Ä:', {
        type: message.type,
        wsReadyState: wsRef.current?.readyState,
        queueLength: messageQueueRef.current.length
      });
      messageQueueRef.current.push(message);
    }
  }, []);

  // Ï¢ÖÎ™© Íµ¨ÎèÖ - ÏÉàÎ°úÏö¥ ÌÇ§ÏõÄ API ÌòïÏãù
  const subscribe = useCallback((symbols: string[], dataTypes: ('quote' | 'candle' | 'orderbook' | 'trade')[] = ['quote'], refresh: boolean = false) => {
    // ÌÇ§ÏõÄ ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Îß§Ìïë
    const kiwoomTypes = dataTypes.map(type => {
      switch (type) {
        case 'quote': return '0B';      // Ï£ºÏãùÏ≤¥Í≤∞ (Ïã§ÏãúÍ∞Ñ Ï≤¥Í≤∞Í∞Ä, Í±∞ÎûòÎüâ)
        case 'candle': return '0B';     // Ï£ºÏãùÏ≤¥Í≤∞ (Ï∫îÎì§ ÏÉùÏÑ±Ïö©)
        case 'orderbook': return '0A';  // Ï£ºÏãùÌò∏Í∞Ä (Îß§Ïàò/Îß§ÎèÑ Ìò∏Í∞Ä)
        case 'trade': return '0B';      // Ï£ºÏãùÏ≤¥Í≤∞ (Í±∞Îûò ÎÇ¥Ïó≠)
        default: return '0B';
      }
    });

    // REG Î™ÖÎ†πÏñ¥Î°ú Ï¢ÖÎ™© Íµ¨ÎèÖ
    const subscribeMsg = {
      command: 'REG',
      grp_no: '1',
      refresh: refresh ? '1' : '0',  // '0': Í∏∞Ï°¥Ìï¥ÏßÄ, '1': Í∏∞Ï°¥Ïú†ÏßÄ
      data: [{
        item: symbols,
        type: [...new Set(kiwoomTypes)]  // Ï§ëÎ≥µ Ï†úÍ±∞
      }]
    };
    
    console.log('üì§ ÌÇ§ÏõÄ REG Íµ¨ÎèÖ Î©îÏãúÏßÄ:', {
      ÏõêÎ≥∏ÌÉÄÏûÖ: dataTypes,
      ÌÇ§ÏõÄÌÉÄÏûÖ: kiwoomTypes,
      Ï¢ÖÎ™©: symbols,
      Î©îÏãúÏßÄ: subscribeMsg
    });
    
    sendMessage(subscribeMsg);
  }, [sendMessage]);

  // Ï¢ÖÎ™© Íµ¨ÎèÖ Ìï¥Ï†ú - ÏÉàÎ°úÏö¥ ÌÇ§ÏõÄ API ÌòïÏãù
  const unsubscribe = useCallback((symbols?: string[], dataTypes?: ('quote' | 'candle' | 'orderbook' | 'trade')[]) => {
    let unsubscribeMsg;

    if (!symbols || symbols.length === 0) {
      // Ï†ÑÏ≤¥ Íµ¨ÎèÖ Ìï¥ÏßÄ
      unsubscribeMsg = {
        command: 'REMOVE',
        grp_no: '1',
        data: []  // Îπà Î∞∞Ïó¥ = Ï†ÑÏ≤¥ Ìï¥ÏßÄ
      };
      console.log('üì§ ÌÇ§ÏõÄ Ï†ÑÏ≤¥ Íµ¨ÎèÖ Ìï¥ÏßÄ:', unsubscribeMsg);
    } else {
      // ÌäπÏ†ï Ï¢ÖÎ™©Îßå Ìï¥ÏßÄ
      const kiwoomTypes = dataTypes?.map(type => {
        switch (type) {
          case 'quote': return '0B';
          case 'candle': return '0B'; 
          case 'orderbook': return '0A';
          case 'trade': return '0B';
          default: return '0B';
        }
      }) || ['0B'];  // Í∏∞Î≥∏Í∞í

      unsubscribeMsg = {
        command: 'REMOVE',
        grp_no: '1',
        data: [{
          item: symbols,
          type: [...new Set(kiwoomTypes)]
        }]
      };
      
      console.log('üì§ ÌÇ§ÏõÄ ÌäπÏ†ï Ï¢ÖÎ™© Íµ¨ÎèÖ Ìï¥ÏßÄ:', {
        Ï¢ÖÎ™©: symbols,
        ÌÉÄÏûÖ: dataTypes,
        ÌÇ§ÏõÄÌÉÄÏûÖ: kiwoomTypes,
        Î©îÏãúÏßÄ: unsubscribeMsg
      });
    }

    sendMessage(unsubscribeMsg);
  }, [sendMessage]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  return {
    status,
    isConnected: status === 'connected',
    lastMessage,
    error,
    connect,
    disconnect,
    sendMessage,
    subscribe,
    unsubscribe,
    reconnectAttempts,
  };
}