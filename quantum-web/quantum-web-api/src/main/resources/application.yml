server:
  port: 8080

spring:
  profiles:
    active: development

  # PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://localhost:5433/quantum_trading
    username: quantum
    password: quantum123
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        hbm2ddl:
          auto: create-drop
    defer-datasource-initialization: false
    
  sql:
    init:
      mode: never

  # Jackson Configuration
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: quantum-web-api
      auto-offset-reset: latest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.quantum.web.events"
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.quantum.web.events.RealtimeDataEvent

# InfluxDB Configuration
influxdb:
  url: http://localhost:8086
  token: quantum-super-secret-auth-token
  org: quantum-trading
  bucket: realtime-data

# Axon Framework Configuration
axon:
  axonserver:
    servers: localhost:8124
  serializer:
    general: jackson
    events: jackson
    messages: jackson

# API Documentation
springdoc:
  api-docs:
    enabled: true
    path: /docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html

# Logging Configuration
logging:
  level:
    com.quantum.web: DEBUG
    com.quantum.trading.platform: DEBUG
    org.springframework.web: INFO
    org.axonframework: INFO
    org.springframework.security: DEBUG

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,tracing
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0  # 개발 환경에서는 100% 샘플링
  zipkin:
    tracing:
      endpoint: http://quantum-zipkin:9411/api/v2/spans

# CORS Configuration
cors:
  allowed-origins:
    - "http://localhost:3000"  # Next.js 개발 서버
    - "http://localhost:3001"  # React 개발 서버
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers: "*"
  allow-credentials: true

# Quantum Trading Platform Configuration
quantum:
  encryption:
    master-key: ${QUANTUM_MASTER_KEY:DEFAULT_MASTER_KEY_CHANGE_IN_PRODUCTION_12345678901234567890123456789012}
  kiwoom:
    api:
      base-url: ${KIWOOM_API_BASE_URL:http://localhost:8100}
      timeout: 30000
    token:
      default-ttl: 14400  # 4시간 (초)
      refresh-threshold: 1800  # 30분 (초)



---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
logging:
  level:
    org.springframework.web: DEBUG
    com.quantum: TRACE
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  jpa:
    show-sql: false
logging:
  level:
    root: WARN
    com.quantum: INFO
