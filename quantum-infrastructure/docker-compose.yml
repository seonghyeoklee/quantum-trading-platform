# ================================================================
# Quantum Trading Platform - 통합 Infrastructure
# Monitoring + Airflow + PostgreSQL
# ================================================================

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.2-python3.11
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://quantum:quantum123@quantum-postgres:5432/quantum_trading?options=-csearch_path%3Dairflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # Connection to quantum PostgreSQL (same database, different service name)
    AIRFLOW_CONN_QUANTUM_POSTGRES: postgresql://quantum:quantum123@quantum-postgres:5432/quantum_trading
    PYTHONPATH: /opt/airflow/dags:/opt/airflow/plugins:/opt/airflow/quantum_analysis
  volumes:
    - ../airflow/dags:/opt/airflow/dags
    - ../airflow/logs:/opt/airflow/logs
    - ../airflow/plugins:/opt/airflow/plugins
    - ../quantum-adapter-kis/trading_strategy:/opt/airflow/quantum_analysis
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    quantum-postgres:
      condition: service_healthy
  networks:
    - quantum-network

services:
  # ================================================================
  # PostgreSQL Database (shared by Airflow and main application)
  # ================================================================
  quantum-postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    environment:
      POSTGRES_USER: quantum
      POSTGRES_PASSWORD: quantum123
      POSTGRES_DB: quantum_trading
    volumes:
      - quantum-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "quantum"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - quantum-network

  # ================================================================
  # Airflow Services (uses shared PostgreSQL)
  # ================================================================
  
  # Airflow Init (Database setup)
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "$${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-quantum123}
    user: "0:0"
    volumes:
      - ../airflow:/sources

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ================================================================
  # Monitoring Services
  # ================================================================

  # Loki - 로그 집계 및 저장
  loki:
    image: grafana/loki:2.9.0
    container_name: quantum-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - quantum-network
    restart: unless-stopped

  # Promtail - 로그 수집 에이전트
  promtail:
    image: grafana/promtail:2.9.0
    container_name: quantum-promtail
    volumes:
      - ./monitoring/promtail-config-simple-realtime.yml:/etc/promtail/config.yml
      - ../quantum-web-api/logs:/app/logs:ro
      - ../airflow/logs:/app/logs-airflow:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - quantum-network
    restart: unless-stopped

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantum-network
    restart: unless-stopped

  # Grafana - 시각화 대시보드
  grafana:
    image: grafana/grafana:10.1.0
    container_name: quantum-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=quantum2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    networks:
      - quantum-network
    restart: unless-stopped

# ================================================================
# Networks & Volumes
# ================================================================

networks:
  quantum-network:
    name: quantum-network
    external: true

volumes:
  # Database
  quantum-postgres-data:
    driver: local
    
  # Monitoring
  loki-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local