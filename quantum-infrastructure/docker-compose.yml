services:
  # Axon Server - Event Store & Message Hub
  axon-server:
    image: axoniq/axonserver:2023.2.0
    hostname: axon-server
    container_name: quantum-axon-server
    ports:
      - "8024:8024"  # HTTP API & UI
      - "8124:8124"  # gRPC
    environment:
      - AXONIQ_AXONSERVER_STANDALONE=true
      - AXONIQ_AXONSERVER_HOSTNAME=axon-server
      - AXONIQ_AXONSERVER_DOMAIN=quantum-trading
    volumes:
      - axon-data:/data
      - axon-events:/eventdata
      - axon-config:/config
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8024/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL - Query Side Database
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    environment:
      POSTGRES_DB: quantum_trading
      POSTGRES_USER: quantum
      POSTGRES_PASSWORD: quantum123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum -d quantum_trading"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - Caching Layer
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - quantum-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # InfluxDB - Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: quantum-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=quantum
      - DOCKER_INFLUXDB_INIT_PASSWORD=quantum123
      - DOCKER_INFLUXDB_INIT_ORG=quantum-trading
      - DOCKER_INFLUXDB_INIT_BUCKET=realtime-data
      - DOCKER_INFLUXDB_INIT_RETENTION=30d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=quantum-super-secret-auth-token
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka & Zookeeper - External Message Bus
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: quantum-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - quantum-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: quantum-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://quantum-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - alertmanager
    networks:
      - quantum-network

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: quantum-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=quantum123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - quantum-network

  # ============== APPLICATION SERVICES ==============

  # Quantum Web API (Spring Boot)
  quantum-web-api:
    build:
      context: ../quantum-web/quantum-web-api
      dockerfile: ../../quantum-infrastructure/docker/web-api.Dockerfile
    container_name: quantum-web-api
    ports:
      - "10101:10101"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=10101
      - AXON_SERVER_HOST=quantum-axon-server
      - DB_HOST=quantum-postgres
      - DB_PORT=5432
      - DB_NAME=quantum_trading
      - DB_USER=quantum
      - DB_PASSWORD=quantum123
      - REDIS_HOST=quantum-redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=quantum-kafka:29092
      - KIWOOM_API_URL=http://quantum-kiwoom-adapter:10201
      - TEMPO_ENDPOINT=http://quantum-tempo:4318
    volumes:
      - ./logs/api:/app/logs
    depends_on:
      - axon-server
      - postgres
      - redis
      - kafka
      - tempo
    networks:
      - quantum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10101/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============== ADAPTER SERVICES ==============

  # Kiwoom Python API Adapter
  quantum-kiwoom-adapter:
    build:
      context: ../quantum-adapters/kiwoom-adapter
      dockerfile: ../../quantum-infrastructure/docker/kiwoom-service.Dockerfile
    container_name: quantum-kiwoom-adapter
    ports:
      - "10201:10201"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - FASTAPI_HOST=0.0.0.0
      - FASTAPI_PORT=10201
      - LOG_LEVEL=INFO
      - KIWOOM_SANDBOX_MODE=true
      - ENABLE_METRICS=true
      - TEMPO_ENDPOINT=http://quantum-tempo:4318
      # 환경변수는 .env.docker에서 로드됨:
      # - KIWOOM_SANDBOX_APP_KEY
      # - KIWOOM_SANDBOX_APP_SECRET  
      # - KIWOOM_PRODUCTION_APP_KEY
      # - KIWOOM_PRODUCTION_APP_SECRET
      # - DART_API_KEY
      # - NAVER_CLIENT_ID
      # - NAVER_CLIENT_SECRET
    volumes:
      - ./logs/kiwoom:/app/logs
    depends_on:
      - tempo
    networks:
      - quantum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10201/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============== WEB SERVICES ==============

  # Quantum Web Client (Next.js)
  quantum-web-client:
    build:
      context: ../quantum-web/quantum-web-client
      dockerfile: ../../quantum-infrastructure/docker/web-client.Dockerfile
    container_name: quantum-web-client
    ports:
      - "10301:10301"
    environment:
      - NODE_ENV=production
      - PORT=10301
      # Tailscale IP 설정 (동적 호스트 감지에서 사용)
      - NEXT_PUBLIC_TAILSCALE_IP=100.68.90.21
      # API URL 환경변수를 제거하여 동적 감지 활성화
      # NEXT_PUBLIC_API_URL과 NEXT_PUBLIC_KIWOOM_ADAPTER_URL을 설정하지 않으면
      # api-config.ts의 동적 호스트 감지가 작동함
    depends_on:
      - quantum-web-api
      - quantum-kiwoom-adapter
    networks:
      - quantum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============== MONITORING & MANAGEMENT ==============

  # Loki - Log Aggregation System
  loki:
    image: grafana/loki:2.9.0
    container_name: quantum-loki
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/loki/loki.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Promtail - Log Collection Agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: quantum-promtail
    ports:
      - "9080:9080"
    volumes:
      - ./infrastructure/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    user: root
    depends_on:
      - loki
    networks:
      - quantum-network
    restart: unless-stopped

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:2.2.0
    container_name: quantum-tempo
    ports:
      - "3200:3200"   # HTTP API
      - "14268:14268" # Jaeger ingest
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    volumes:
      - ./infrastructure/tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo-data:/tmp/tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AlertManager - Alert Routing and Notification
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: quantum-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: quantum-kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=quantum-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=quantum-kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=quantum-zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - quantum-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: quantum-redis-commander
    ports:
      - "8091:8081"
    environment:
      - REDIS_HOSTS=local:quantum-redis:6379
    depends_on:
      - redis
    networks:
      - quantum-network

volumes:
  axon-data:
    driver: local
  axon-events:
    driver: local
  axon-config:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  tempo-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  quantum-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
