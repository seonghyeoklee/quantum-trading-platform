'use client';

import { useEffect, useRef, useCallback } from 'react';
import { useTheme } from 'next-themes';
import { CandlestickData } from './ChartTypes';

interface TradingChartProps {
  data: CandlestickData[];
  width?: number;
  height?: number;
  symbol?: string;
  timeframe?: string;
  chartType?: string;
  stockName?: string;
}

export default function TradingChart({ 
  data, 
  width = 800, 
  height = 400,
  symbol = '005930',
  timeframe = '1M',
  chartType = 'daily',
  stockName
}: TradingChartProps) {
  console.log('TradingChart ÏãúÏûë:', { Îç∞Ïù¥ÌÑ∞Í∏∏Ïù¥: data.length, symbol, chartType, stockName });

  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chart = useRef<any>(null);
  const series = useRef<any>(null);
  const { resolvedTheme } = useTheme();

  useEffect(() => {
    const handleResize = () => {
      if (chart.current && chartContainerRef.current) {
        chart.current.applyOptions({ 
          width: chartContainerRef.current.clientWidth 
        });
      }
    };

    const initChart = async () => {
      if (!chartContainerRef.current) return;
      
      console.log('Ï∞®Ìä∏ Ï¥àÍ∏∞Ìôî ÏãúÏûë (v4), Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥:', data.length);
      
      try {
        // lightweight-charts v4 Î∞©Ïãù
        const { createChart, ColorType } = await import('lightweight-charts');
        
        console.log('lightweight-charts v4 Î°úÎìú ÏôÑÎ£å');
        
        // Í∏∞Ï°¥ Ï∞®Ìä∏ Ï†úÍ±∞
        if (chart.current) {
          chart.current.remove();
        }

        const isDark = resolvedTheme === 'dark';
        
        console.log('Ï∞®Ìä∏ ÏÉùÏÑ± ÏãúÎèÑ (v4)...');
        
        // v4 Î∞©ÏãùÏúºÎ°ú Ï∞®Ìä∏ ÏÉùÏÑ±
        chart.current = createChart(chartContainerRef.current, {
          width: chartContainerRef.current.clientWidth,
          height: height,
          layout: {
            background: {
              type: ColorType.Solid,
              color: isDark ? '#0c0a09' : '#ffffff'
            },
            textColor: isDark ? '#fafaf9' : '#0c0a09',
            fontSize: 12,
            fontFamily: 'ui-sans-serif, system-ui, -apple-system, sans-serif',
          },
          grid: {
            vertLines: { 
              color: isDark ? '#292524' : '#e7e5e4',
              style: 1, // Ï†êÏÑ†
            },
            horzLines: { 
              color: isDark ? '#292524' : '#e7e5e4',
              style: 1, // Ï†êÏÑ†
            },
          },
          crosshair: {
            mode: 1, // Normal crosshair mode
            vertLine: {
              width: 1,
              color: isDark ? '#78716c' : '#57534e',
              style: 0, // Ïã§ÏÑ†
            },
            horzLine: {
              width: 1,
              color: isDark ? '#78716c' : '#57534e',
              style: 0, // Ïã§ÏÑ†
            },
          },
          rightPriceScale: {
            borderColor: isDark ? '#44403c' : '#d6d3d1',
            autoScale: true,
            scaleMargins: {
              top: 0.1,
              bottom: 0.1,
            },
            ticksVisible: true,
            entireTextOnly: false,
          },
          timeScale: {
            borderColor: isDark ? '#44403c' : '#d6d3d1',
            timeVisible: true,
            secondsVisible: false,
          },
          handleScroll: {
            mouseWheel: true,
            pressedMouseMove: true,
            horzTouchDrag: true,
            vertTouchDrag: true,
          },
          handleScale: {
            axisPressedMouseMove: true,
            mouseWheel: true,
            pinch: true,
          },
        });

        console.log('Ï∞®Ìä∏ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å (v4):', {
          chartExists: !!chart.current,
          addCandlestickSeries: typeof chart.current?.addCandlestickSeries
        });

        // v4 Î∞©ÏãùÏúºÎ°ú Ï∫îÎì§Ïä§Ìã± ÏãúÎ¶¨Ï¶à ÏÉùÏÑ± (ÌïúÍµ≠Ïãù ÏÉâÏÉÅ: Îπ®Í∞ï=ÏÉÅÏäπ, ÌååÎûë=ÌïòÎùΩ)
        series.current = chart.current.addCandlestickSeries({
          upColor: '#ef4444',      // ÏÉÅÏäπ: Îπ®Í∞ï
          downColor: '#3b82f6',    // ÌïòÎùΩ: ÌååÎûë
          borderDownColor: '#3b82f6',  // ÌïòÎùΩ ÌÖåÎëêÎ¶¨: ÌååÎûë
          borderUpColor: '#ef4444',    // ÏÉÅÏäπ ÌÖåÎëêÎ¶¨: Îπ®Í∞ï
          wickDownColor: '#3b82f6',    // ÌïòÎùΩ Ïã¨ÏßÄ: ÌååÎûë
          wickUpColor: '#ef4444',      // ÏÉÅÏäπ Ïã¨ÏßÄ: Îπ®Í∞ï
          priceFormat: {
            type: 'price',
            precision: 0,
            minMove: 1,
          },
        });

        console.log('Ï∫îÎì§Ïä§Ìã± ÏãúÎ¶¨Ï¶à ÏÉùÏÑ± ÏôÑÎ£å (v4):', !!series.current);

        // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÑ§Ï†ï
        if (data.length > 0) {
          console.log('üîç Ï¥àÍ∏∞ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù:', { 
            chartType, 
            timeframe, 
            ÏõêÎ≥∏Í∞úÏàò: data.length, 
            Ï≤´Î≤àÏß∏ÏõêÎ≥∏: data[0],
            ÎßàÏßÄÎßâÏõêÎ≥∏: data[data.length - 1]
          });
          
          // Í∞ÑÎã®Ìïú Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò (ÌÉÄÏûÖ Ïò§Î•ò Î∞©ÏßÄ)
          const chartData = data.map((item) => ({
            time: item.time,
            open: item.open,
            high: item.high,
            low: item.low,
            close: item.close,
          }));
          
          console.log('üìä Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò ÏôÑÎ£å:', {
            Î≥ÄÌôòÌõÑÍ∞úÏàò: chartData.length,
            Ï≤´Î≤àÏß∏Îç∞Ïù¥ÌÑ∞: chartData[0],
            ÎßàÏßÄÎßâÎç∞Ïù¥ÌÑ∞: chartData[chartData.length - 1]
          });
          
          series.current.setData(chartData);
          chart.current.timeScale().fitContent();
        }

        // Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
        window.addEventListener('resize', handleResize);
        
        console.log('Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å (v4)');

      } catch (error) {
        console.error('Ï∞®Ìä∏ ÏÉùÏÑ± Ïò§Î•ò (v4):', error);
        console.error('ÏóêÎü¨ Ïä§ÌÉù:', error instanceof Error ? error.stack : 'No stack');
      }
    };

    initChart();

    return () => {
      window.removeEventListener('resize', handleResize);
      
      if (chart.current) {
        chart.current.remove();
        chart.current = null;
        series.current = null;
      }
    };
  }, [data, height, resolvedTheme, chartType]);

  return (
    <div className="w-full h-full">
      <div 
        ref={chartContainerRef} 
        className="w-full rounded-lg border border-border trading-chart-container"
        style={{ height: `${height}px` }}
      />
    </div>
  );
}
