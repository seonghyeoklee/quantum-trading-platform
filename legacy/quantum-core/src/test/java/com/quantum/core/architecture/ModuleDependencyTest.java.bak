package com.quantum.core.architecture;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.*;

import com.tngtech.archunit.core.domain.JavaClasses;
import com.tngtech.archunit.core.importer.ClassFileImporter;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

/**
 * 모듈간 의존성 규칙 검증 테스트
 * 
 * Quantum Trading System의 모듈간 의존성 원칙들을 ArchUnit으로 강제한다:
 * 1. quantum-core → 외부 라이브러리만 허용
 * 2. quantum-api → quantum-core만 허용  
 * 3. quantum-batch → quantum-core만 허용
 * 4. quantum-adapter → quantum-core만 허용 (최근 수정된 부분)
 * 5. 순환 의존성 금지
 */
@DisplayName("🔗 Module Dependency Rules")
class ModuleDependencyTest {

    private static final String BASE_PACKAGE = "com.quantum";
    private static final JavaClasses classes = new ClassFileImporter()
            .importPackages(BASE_PACKAGE);

    @Test
    @DisplayName("quantum-core는 다른 quantum 모듈에 의존하지 않아야 한다")
    void quantum_core_should_not_depend_on_other_quantum_modules() {
        noClasses()
                .that().resideInAPackage("com.quantum.core..")
                .should().dependOnClassesThat().resideInAnyPackage(
                        "com.quantum.api..",
                        "com.quantum.batch..",
                        "com.quantum.adapter..",
                        "com.quantum.analysis.."
                )
                .because("quantum-core는 핵심 도메인으로서 다른 모듈에 의존하지 않아야 함")
                .check(classes);
    }

    @Test
    @DisplayName("quantum-core는 Spring Framework에만 제한적으로 의존해야 한다")
    void quantum_core_should_have_limited_spring_dependencies() {
        classes()
                .that().resideInAPackage("com.quantum.core.domain..")
                .should().onlyDependOnClassesThat()
                .resideInAnyPackage(
                        "java..",
                        "jakarta.persistence..",
                        "jakarta.validation..",
                        "lombok..",
                        "com.fasterxml.jackson..",
                        "com.quantum.core..",
                        "org.springframework.context..",     // @EventListener 등
                        "org.springframework.stereotype.."   // @Component 등
                )
                .because("도메인 계층은 Spring에 최소한으로만 의존해야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Infrastructure 계층만 JPA 구현체에 의존할 수 있다")
    void only_infrastructure_should_depend_on_jpa_implementations() {
        noClasses()
                .that().resideOutsideOfPackage("..infrastructure..")
                .should().dependOnClassesThat().resideInAnyPackage(
                        "org.hibernate..",
                        "org.springframework.data.jpa..",
                        "org.springframework.orm.."
                )
                .because("JPA 구현체 의존성은 인프라스트럭처 계층에만 허용됨")
                .check(classes);
    }

    @Test
    @DisplayName("Application 계층은 외부 API 클라이언트에 의존하지 않아야 한다")
    void application_layer_should_not_depend_on_external_api_clients() {
        noClasses()
                .that().resideInAPackage("..application..")
                .should().dependOnClassesThat().resideInAnyPackage(
                        "feign..",
                        "retrofit..",
                        "okhttp..",
                        "org.springframework.web.client..",
                        "org.springframework.webflux.."
                )
                .because("애플리케이션 계층은 외부 API 클라이언트에 직접 의존하지 않아야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Event Sourcing 구현체는 Infrastructure에만 있어야 한다")
    void event_sourcing_implementations_should_be_in_infrastructure() {
        classes()
                .that().haveSimpleNameContaining("EventStore")
                .and().areNotInterfaces()
                .or().haveSimpleNameContaining("Headspring")
                .and().areNotInterfaces()
                .should().resideInAPackage("..infrastructure.eventsourcing..")
                .because("Event Sourcing 구현체는 인프라스트럭처의 관심사임")
                .check(classes);
    }

    @Test
    @DisplayName("KIS API 관련 클래스는 적절한 패키지에 있어야 한다")
    void kis_api_classes_should_be_in_appropriate_packages() {
        classes()
                .that().haveSimpleNameStartingWith("Kis")
                .and().resideInAPackage("com.quantum.core..")
                .should().resideInAnyPackage(
                        "..domain.model.kis..",
                        "..infrastructure.repository.."
                )
                .because("KIS 관련 클래스는 도메인 모델이나 인프라 Repository에만 있어야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Configuration은 Infrastructure에만 있어야 한다")
    void configurations_should_only_be_in_infrastructure() {
        classes()
                .that().areAnnotatedWith("org.springframework.context.annotation.Configuration")
                .or().haveSimpleNameEndingWith("Config")
                .or().haveSimpleNameEndingWith("Configuration")
                .should().resideInAPackage("..infrastructure.config..")
                .because("Spring Configuration은 인프라스트럭처의 관심사임")
                .check(classes);
    }

    @Test
    @DisplayName("Test 클래스는 같은 패키지 구조를 따라야 한다")
    void test_classes_should_follow_same_package_structure() {
        classes()
                .that().haveSimpleNameEndingWith("Test")
                .should().resideInAPackage("..test..")
                .because("테스트 클래스는 테스트 패키지에 있어야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Batch 관련 어노테이션은 금지되어야 한다")
    void batch_annotations_should_be_forbidden_in_core() {
        noClasses()
                .that().resideInAPackage("com.quantum.core..")
                .should().beAnnotatedWith("org.springframework.batch.core.configuration.annotation.EnableBatchProcessing")
                .orShould().dependOnClassesThat().resideInAnyPackage("org.springframework.batch..")
                .because("Batch 관련 의존성은 quantum-batch 모듈에만 있어야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Web 관련 어노테이션은 금지되어야 한다")
    void web_annotations_should_be_forbidden_in_core() {
        noClasses()
                .that().resideInAPackage("com.quantum.core..")
                .should().beAnnotatedWith("org.springframework.web.bind.annotation.RestController")
                .orShould().beAnnotatedWith("org.springframework.web.bind.annotation.Controller")
                .orShould().beAnnotatedWith("org.springframework.web.bind.annotation.RequestMapping")
                .because("Web 관련 어노테이션은 quantum-api 모듈에만 있어야 함")
                .check(classes);
    }

    @Test
    @DisplayName("외부 API Client 의존성은 금지되어야 한다")
    void external_api_client_dependencies_should_be_forbidden_in_core() {
        noClasses()
                .that().resideInAPackage("com.quantum.core..")
                .should().dependOnClassesThat().resideInAnyPackage(
                        "feign..",
                        "com.quantum.kis.."  // 이제 quantum-adapter로 분리됨
                )
                .because("외부 API 클라이언트 의존성은 quantum-adapter 모듈에만 있어야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Domain Event는 올바른 네이밍 규칙을 따라야 한다")
    void domain_events_should_follow_naming_conventions() {
        classes()
                .that().resideInAPackage("..application.event..")
                .and().haveSimpleNameEndingWith("Event")
                .should().haveSimpleNameMatching(".*Event$")
                .andShould().haveSimpleNameMatching("^[A-Z][a-zA-Z]*Event$")
                .because("Domain Event는 명확한 네이밍 규칙을 따라야 함")
                .check(classes);
    }

    @Test
    @DisplayName("Repository 구현체는 올바른 네이밍을 사용해야 한다")
    void repository_implementations_should_use_correct_naming() {
        classes()
                .that().resideInAPackage("..infrastructure.repository..")
                .and().areNotInterfaces()
                .should().haveSimpleNameEndingWith("RepositoryImpl")
                .orShould().haveSimpleNameEndingWith("RepositoryAdapter")
                .orShould().haveSimpleNameEndingWith("JpaRepository")
                .because("Repository 구현체는 명확한 네이밍을 사용해야 함")
                .check(classes);
    }
}