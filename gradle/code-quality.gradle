// Code Quality Configuration for Quantum Trading Service
// Only apply to Java modules

if (project.name != 'quantum-analysis') {
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.diffplug.spotless'
}

// Only configure for Java modules
if (project.name != 'quantum-analysis') {

// Checkstyle configuration
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        'org.checkstyle.google.suppressionfilter.config': "${rootProject.projectDir}/config/checkstyle/checkstyle-suppressions.xml"
    ]
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

checkstyleMain {
    source = 'src/main/java'
    include '**/*.java'
    exclude '**/generated/**'
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/checkstyle/main.html")
    }
}

checkstyleTest {
    source = 'src/test/java'
    include '**/*.java'
    exclude '**/generated/**'
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/checkstyle/test.html")
    }
}

// PMD configuration
pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files("${rootProject.projectDir}/config/pmd/pmd-ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
}

pmdMain {
    source = 'src/main/java'
    include '**/*.java'
    exclude '**/generated/**'
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/pmd/main.html")
    }
}

pmdTest {
    source = 'src/test/java'
    include '**/*.java'
    exclude '**/generated/**'
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/pmd/test.html")
    }
}

// SpotBugs configuration
spotbugs {
    toolVersion = '4.8.2'
    effort = 'max'
    reportLevel = 'medium'
    ignoreFailures = false
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/spotbugs/main.html")
    }
}

spotbugsTest {
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/reports/spotbugs/test.html")
    }
}

// Custom task to run all code quality checks
tasks.register('codeQuality') {
    group = 'verification'
    description = 'Runs all code quality checks (Checkstyle, PMD, SpotBugs)'
    dependsOn 'checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest', 'spotbugsMain', 'spotbugsTest'
}

// Run code quality checks before build
check.dependsOn codeQuality

// Custom task for quick style check (faster feedback)
tasks.register('styleCheck') {
    group = 'verification'
    description = 'Runs quick style checks (Checkstyle only)'
    dependsOn 'checkstyleMain', 'checkstyleTest'
}

// Print helpful information
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(codeQuality)) {
        println """
        =====================================
        Running Code Quality Checks
        =====================================
        Reports will be generated in:
        - Checkstyle: ${buildDir}/reports/checkstyle/
        - PMD: ${buildDir}/reports/pmd/
        - SpotBugs: ${buildDir}/reports/spotbugs/
        =====================================
        """
    }
}

// Configure quality gates for CI/CD
tasks.register('qualityGate') {
    group = 'verification'
    description = 'Quality gate for CI/CD pipeline'
    dependsOn codeQuality, test

    doLast {
        // Check if any quality reports have failures
        def checkstyleReports = fileTree(dir: "${buildDir}/reports/checkstyle", include: "*.xml")
        def pmdReports = fileTree(dir: "${buildDir}/reports/pmd", include: "*.xml")
        def spotbugsReports = fileTree(dir: "${buildDir}/reports/spotbugs", include: "*.xml")

        checkstyleReports.each { file ->
            def checkstyle = new XmlSlurper().parse(file)
            def errorCount = checkstyle.file.findAll { it.error.size() > 0 }.size()
            if (errorCount > 0) {
                throw new GradleException("Checkstyle found ${errorCount} errors. Check ${file}")
            }
        }

        println "âœ… All quality gates passed!"
    }
}

// Spotless configuration for automatic code formatting
spotless {
    java {
        // Import ordering to match Checkstyle CustomImportOrder: STATIC, THIRD_PARTY, STANDARD_JAVA
        importOrder 'java', 'javax', 'org', 'com', '', '\\#'
        
        // Remove unused imports
        removeUnusedImports()
        
        // Use Google Java Format with AOSP style (4-space indentation)
        googleJavaFormat('1.19.1').aosp()
        
        // Use 4-space indentation to match Checkstyle configuration
        indentWithSpaces(4)
        
        // Trim trailing whitespace
        trimTrailingWhitespace()
        
        // End files with a newline
        endWithNewline()
        
        // Custom formatting rules for empty lines
        custom 'noMultipleEmptyLines', {
            // Replace multiple consecutive empty lines with single empty line
            it.replaceAll(/\n\n\n+/, '\n\n')
        }
        
        // Ensure proper line endings
        custom 'ensureNewlineAtEndOfFile', {
            if (!it.endsWith('\n')) {
                it + '\n'
            } else {
                it
            }
        }
        
        // Custom indentation enforcement for consistency (applied after Google Java Format)
        custom 'enforceIndentation', {
            // Replace any 2-space indentation with 4-space
            String result = it.replaceAll(/\t/, '    ')
            // Fix 2-space indentation patterns to 4-space
            result = result.replaceAll(/(?m)^( {2})(?! )/, '    ')
            result = result.replaceAll(/(?m)^( {6})(?! )/, '        ')
            result = result.replaceAll(/(?m)^( {10})(?! )/, '            ')
            result = result.replaceAll(/(?m)^( {14})(?! )/, '                ')
            return result
        }
        
        // Target all Java files
        target '**/*.java'
        targetExclude '**/generated/**', '**/build/**'
    }
    
    // Format build.gradle.kts files too
    kotlinGradle {
        target '*.gradle.kts'
        ktlint('0.50.0')
    }
}

// Run spotless formatting before checkstyle
checkstyleMain.dependsOn spotlessJavaApply
checkstyleTest.dependsOn spotlessJavaApply

// Add spotless tasks to code quality
tasks.named('codeQuality') {
    dependsOn 'spotlessCheck'
}

// Add code quality dependencies
configurations {
    codeQuality
}

dependencies {
    // SpotBugs plugins
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.6.0'
}

// Configuration for different environments
if (project.hasProperty('ci')) {
    // CI environment - strict rules
    checkstyle.ignoreFailures = false
    pmd.ignoreFailures = false
    spotbugs.ignoreFailures = false
} else if (project.hasProperty('dev')) {
    // Development environment - warnings only
    checkstyle.ignoreFailures = true
    pmd.ignoreFailures = true
    spotbugs.ignoreFailures = true

    // Reduce verbosity for development
    pmd.consoleOutput = false
}

} // End of Java modules check
